openapi: 3.0.0
info:
  version: '1.0'
  title: 'TicketSupportAPI'
  description: 'Conjunto de endpoints que permitiran a usuarios de tipo cliente generar ordenes de servicio para solicitud de servicios para instalación de soportes de TV. Además los usuatios de tipo Tech podran dar seguimiento a las ordenes, editarlas o cerrarlas. Por ultimo los usuarios de tipo admin podrán crear usuarios que usen el sistema y definir su tipo, además de editarlos, consultarlos o eliminarlos. Esta API está construida usando Node JS, Express(para establecer el servidor), Sequelize (ORM para conexión con una base de Datos Postgress) y JSON Web Tokens (para aplicar autenticacion a los diferentes endpoints). El Script de la Base de datos está en el repositorio de toda la aplicación, el cual se encuentra en: https://github.com/DanteVDrako/ticket-support.git y su despliegue se realizo con los servicios de Heroku Postgress. El despliegue de la aplicación Node JS tambien esta hecha en Heroku bajo el enlace https://ticket-support-api-rest.herokuapp.com/'
  contact:
    name: 'Andrés Sierra Laverde'
    url: 'https://www.linkedin.com/in/andres-sierra-laverde'
    email: 'dante.andres.swei@gmail.com' 
paths: 
  /login:
    post:
      description: 'Permite hacer un inicio de sesión en el sistema y generar el token del usuario'
      parameters:
      - in: 'path'
        name: 'email_user'
        required: true
        description: 'Correo eléctronico del usuario'
        schema: 
          type: 'string'
          example: 'user1@myapp.com'
      - in: 'path'
        name: 'pass_user'
        required: true
        description: 'Contraseña del usuario.'
        schema: 
          type: 'string'
          example: '123asd'
      responses:
        200: 
          description: 'Inicio de sesión exitoso'
          content: 
            application/json:
              schema: 
                type: 'array'
                items:
                  properties:
                     auth:
                      type: 'boolean'
                      example: true
                     message:
                      type: 'string'
                      example: "The user now is in our system!"
                     token:
                      type: 'string'
                      example: 'a68a98a87lkfdhd.1345335454'
        400:
          description: 'Datos de sesión erroneos.'
          content:
            application/json:
              schema: 
                type: 'array'
                items:
                  properties:
                    auth:
                      type: 'boolean'
                      example: false
                    message:
                      type: 'string'
                      example: "The username or password are wrong!"
  /profile:
    get:
      description: 'Retorna toda la información del usuario que inicio sesión.'
      responses:
        200:
          description: 'Muestra el usuario que inicio sesión.'
          content:
            application/json:
              schema: 
                type: 'array'
                items:
                  properties:
                    auth: 
                      type: 'boolean'
                      example: true
                    message:  
                      type: 'string'
                      example: "The User logged in the system is..."
                    data:
                      type: 'array'
                      example: {"id_user": 1,"name_user": "admin","email_user": "admin@myapp.com","pass_user": "Abc123","state_user": true,"token": "eyJhbGciOiJIUzI1NiIsIn...","type_user": "admin"}
        401:
          description: 'No existe token de inicio de sesión'
          content:
            application/json:
              schema: 
                type: 'array'
                items:
                  properties:
                    auth:
                      type: 'boolean'
                      example: false
                    message:
                      type: 'string'
                      example: "The user is not logged in to execute this action!"
        400:
          description: 'La API falló'
          content:
            application/json:
              schema: 
                type: 'array'
                items:
                  properties:
                    message:
                      type: 'array'
                      example: "Something failed: APP Error"
  /all_user:
    get:
      description: 'Retorna todos los usuarios almacenados en la base de datos.'
      responses:
        200:
          description: 'Mostrar usuarios en formato JSON.'
          content:
            application/json:
              schema: 
                type: 'array'
                items:
                  properties:
                    auth: 
                      type: 'boolean'
                      example: true
                    message:  
                      type: 'string'
                      example: "Now take your results!"
                    data:
                      type: 'array'
                      example: {"user1":data,"user2":data}
        401:
          description: 'No existe token de inicio de sesión'
          content:
            application/json:
              schema: 
                type: 'array'
                items:
                  properties:
                    auth:
                      type: 'boolean'
                      example: false
                    message:
                      type: 'string'
                      example: "You don't have permission for this action!"
        400:
          description: 'La API falló'
          content:
            application/json:
              schema: 
                type: 'array'
                items:
                  properties:
                    message:
                      type: 'array'
                      example: "Something failed: APP Error"    
  /create_user:
    post:
      description: 'Permite insertar un nuevo usuario en la base de datos.'
      parameters:
      - in: 'path'
        name: 'name_user'
        required: true
        description: 'Nombre del usuario'
        schema: 
          type: 'string'
          example: 'user1'
      - in: 'path'
        name: 'email_user'
        required: true
        description: 'Correo eléctronico del usuario'
        schema: 
          type: 'string'
          example: 'user1@myapp.com'
      - in: 'path'
        name: 'pass_user'
        required: true
        description: 'Contraseña del usuario.'
        schema: 
          type: 'string'
          example: '123asd'
      - in: 'path'
        name: 'type_user'
        required: true
        description: 'Tipo de usuario, puede ser admin, tech o client'
        schema: 
          type: 'string'
          example: 'tech'
      responses:
        200: 
          description: 'Se creo el usuario en la base de datos'
          content: 
            application/json:
              schema: 
                type: 'array'
                items:
                  properties:
                     message:
                      type: 'string'
                      example: "Your user was created!"
                     data:
                      type: 'array'
                      example: {"user1":data}
        401:
          description: 'No existe token de inicio de sesión'
          content:
            application/json:
              schema: 
                type: 'array'
                items:
                  properties:
                    auth:
                      type: 'boolean'
                      example: false
                    message:
                      type: 'string'
                      example: "You don't have permission for this action!"            
        400:
          description: 'La API falló'
          content:
            application/json:
              schema: 
                type: 'array'
                items:
                  properties:
                    message:
                      type: 'array'
                      example: "Something failed: APP Error"         
  /get_user:
    get:
      description: 'Retorna un solo usuario de la base de datos usando un id.'
      parameters:
      - in: 'query'
        name: 'iduser'
        required: true
        description: 'Identificador unico del usuario asignado en la base de datos'
        schema: 
          type: 'number'
          example: 1
      responses:
        200: 
          description: 'Retornó un usuario.'
          content: 
            application/json:
              schema: 
                type: 'array'
                items:
                  properties:
                     message:
                      type: 'string'
                      example: "The User you find is: " 
                     data:
                      type: 'array'
                      example: {"user1":data}
        401:
          description: 'No existe token de inicio de sesión'
          content:
            application/json:
              schema: 
                type: 'array'
                items:
                  properties:
                    auth:
                      type: 'boolean'
                      example: false
                    message:
                      type: 'string'
                      example: "You don't have permission for this action!"              
        400:
          description: 'La API falló'
          content:
            application/json:
              schema: 
                type: 'array'
                items:
                  properties:
                    message:
                      type: 'array'
                      example: "Something failed: APP Error"
  /delete_user:
    delete:
      description: 'Elimina un usuario de la base de datos usando un id.'
      parameters:
      - in: 'query'
        name: 'iduser'
        required: true
        description: 'Identificador unico del usuario asignado en la base de datos'
        schema: 
          type: 'number'
          example: 1
      responses:
        200: 
          description: 'Se eliminó el usuario especificado.'
          content: 
            application/json:
              schema: 
                type: 'array'
                items:
                  properties:
                     message:
                      type: 'string'
                      example: "The User was deleted!" 
        401:
          description: 'No existe token de inicio de sesión'
          content:
            application/json:
              schema: 
                type: 'array'
                items:
                  properties:
                    auth:
                      type: 'boolean'
                      example: false
                    message:
                      type: 'string'
                      example: "You don't have permission for this action!"              
        400:
          description: 'La API falló'
          content:
            application/json:
              schema: 
                type: 'array'
                items:
                  properties:
                    message:
                      type: 'array'
                      example: "Something failed: APP Error"
  /update_user:
    put:
      description: 'Actualiza la información de un usuario de la base de datos usando un id.'
      parameters:
      - in: 'query'
        name: 'iduser'
        required: true
        description: 'Identificador unico del usuario asignado en la base de datos'
        schema: 
          type: 'number'
          example: 1
      - in: 'path'
        name: 'name_user'
        required: true
        description: 'Nombre del usuario'
        schema: 
          type: 'string'
          example: 'user1'
      - in: 'path'
        name: 'email_user'
        required: true
        description: 'Correo eléctronico del usuario'
        schema: 
          type: 'string'
          example: 'user1@myapp.com'
      - in: 'path'
        name: 'pass_user'
        required: true
        description: 'Contraseña del usuario.'
        schema: 
          type: 'string'
          example: '123asd'
      - in: 'path'
        name: 'state_user'
        required: true
        description: 'Si el usuario esta activo o no'
        schema: 
          type: 'boolean'
          example: true
      - in: 'path'
        name: 'type_user'
        required: true
        description: 'Tipo de usuario, puede ser admin, tech o client'
        schema: 
          type: 'string'
          example: 'tech'
      responses:
        200: 
          description: 'Se actualizó el usuario especificado.'
          content: 
            application/json:
              schema: 
                type: 'array'
                items:
                  properties:
                     message:
                      type: 'string'
                      example: "The User was updated!" 
        401:
          description: 'No existe token de inicio de sesión'
          content:
            application/json:
              schema: 
                type: 'array'
                items:
                  properties:
                    auth:
                      type: 'boolean'
                      example: false
                    message:
                      type: 'string'
                      example: "You don't have permission for this action!"              
        400:
          description: 'La API falló'
          content:
            application/json:
              schema: 
                type: 'array'
                items:
                  properties:
                    message:
                      type: 'array'
                      example: "Something failed: APP Error"
  /all_tickets:
    get:
      description: 'Retorna todos los tickets almacenados en la base de datos.'
      responses:
        200:
          description: 'Mostrar los tickets en formato JSON.'
          content:
            application/json:
              schema: 
                type: 'array'
                items:
                  properties:
                    auth: 
                      type: 'boolean'
                      example: true
                    message:  
                      type: 'string'
                      example: "Now take your results!"
                    data:
                      type: 'array'
                      example: {"ticket1":data,"ticket2":data}
        401:
          description: 'No existe token de inicio de sesión'
          content:
            application/json:
              schema: 
                type: 'array'
                items:
                  properties:
                    auth:
                      type: 'boolean'
                      example: false
                    message:
                      type: 'string'
                      example: "You don't have permission for this action!"
        400:
          description: 'La API falló'
          content:
            application/json:
              schema: 
                type: 'array'
                items:
                  properties:
                    message:
                      type: 'array'
                      example: "Something failed: APP Error"    
  /create_ticket:
    post:
      description: 'Permite registrar un nuevo ticket en la base de datos.'
      parameters:
      - in: 'path'
        name: 'id_user'
        required: true
        description: 'Nombre del usuario que generó el ticket'
        schema: 
          type: 'string'
          example: 'user1'
      - in: 'path'
        name: 'ticket_desc'
        required: true
        description: 'Descripción de la apertura del ticket.'
        schema: 
          type: 'string'
          example: 'Se necesita un nuevo soporte pata la TV'
      - in: 'path'
        name: 'created_at'
        required: true
        description: 'Fecha de creación.'
        schema: 
          type: 'string'
          format: 'date'
          example: '2020-06-10'
      - in: 'path'
        name: 'time_duration'
        required: true
        description: 'Duración del ticket en minutos.'
        schema: 
          type: 'number'
          example: '300'
      - in: 'path'
        name: 'closed_at'
        required: true
        description: 'Fecha de cierre.'
        schema: 
          type: 'number'
          format: 'date'
          example: '2020-06-10'
      - in: 'path'
        name: 'state_ticket'
        required: true
        description: 'El estado del ticket, valor por defecto false.'
        schema: 
          type: 'boolean'
          example: false
      responses:
        200: 
          description: 'Se creo el usuario en la base de datos'
          content: 
            application/json:
              schema: 
                type: 'array'
                items:
                  properties:
                     message:
                      type: 'string'
                      example: "Your ticket was created!"
                     data:
                      type: 'array'
                      example: {"ticket1":data}
        401:
          description: 'No existe token de inicio de sesión'
          content:
            application/json:
              schema: 
                type: 'array'
                items:
                  properties:
                    auth:
                      type: 'boolean'
                      example: false
                    message:
                      type: 'string'
                      example: "You don't have permission for this action!"            
        400:
          description: 'La API falló'
          content:
            application/json:
              schema: 
                type: 'array'
                items:
                  properties:
                    message:
                      type: 'array'
                      example: "Something failed: APP Error"               
  /ticketsByUser:
    get:
      description: 'Retorna todos los tickets de la base de datos asignados a un tecnico.'
      parameters:
      - in: 'query'
        name: 'iduser'
        required: true
        description: 'Identificador unico del tecnico asignado en la base de datos'
        schema: 
          type: 'number'
          example: 1
      responses:
        200: 
          description: 'Retorna los tickets del usuario especificado.'
          content: 
            application/json:
              schema: 
                type: 'array'
                items:
                  properties:
                     message:
                      type: 'string'
                      example: "Get list of tickets..." 
                     data:
                      type: 'array'
                      example: {"ticket1":{ "id_user":1},"ticket2":{ "id_user":1}}
        401:
          description: 'No existe token de inicio de sesión'
          content:
            application/json:
              schema: 
                type: 'array'
                items:
                  properties:
                    auth:
                      type: 'boolean'
                      example: false
                    message:
                      type: 'string'
                      example: "You don't have permission for this action!" 
        400:
          description: 'El id solicitado no tiene tickets asignados'
          content:
            application/json:
              schema: 
                type: 'array'
                items:
                  properties:
                    message:
                      type: 'array'
                      example: "The user hasn't tickets assigned to!"
  /one_ticket:
    get:
      description: 'Retorna un solo ticket de la base de datos usando un id.'
      parameters:
      - in: 'query'
        name: 'idticket'
        required: true
        description: 'Identificador unico del ticket asignado en la base de datos'
        schema: 
          type: 'number'
          example: 1
      responses:
        200:
          description: 'Retornó un ticket.'
          content: 
            application/json:
              schema: 
                type: 'array'
                items:
                  properties:
                     message:
                      type: 'string'
                      example: "The Ticket was found" 
                     data:
                      type: 'array'
                      example: {"ticket1":data}
        401:
          description: 'No existe token de inicio de sesión'
          content:
            application/json:
              schema: 
                type: 'array'
                items:
                  properties:
                    auth:
                      type: 'boolean'
                      example: false
                    message:
                      type: 'string'
                      example: "You don't have permission for this action!"              
        400:
          description: 'La API falló'
          content:
            application/json:
              schema: 
                type: 'array'
                items:
                  properties:
                    message:
                      type: 'array'
                      example: "Something failed: APP Error"
  /delete_ticket:
    delete:
      description: 'Elimina un ticket de la base de datos usando un id.'
      parameters:
      - in: 'query'
        name: 'idticket'
        required: true
        description: 'Identificador unico del ticket asignado en la base de datos'
        schema: 
          type: 'number'
          example: 1
      responses:
        200:
          description: 'Se eliminó el ticket especificado.'
          content: 
            application/json:
              schema: 
                type: 'array'
                items:
                  properties:
                     message:
                      type: 'string'
                      example: "Ticket deleted!" 
        401:
          description: 'No existe token de inicio de sesión'
          content:
            application/json:
              schema: 
                type: 'array'
                items:
                  properties:
                    auth:
                      type: 'boolean'
                      example: false
                    message:
                      type: 'string'
                      example: "You don't have permission for this action!"              
        400:
          description: 'La API falló'
          content:
            application/json:
              schema: 
                type: 'array'
                items:
                  properties:
                    message:
                      type: 'array'
                      example: "Something failed: APP Error"
  /update_ticket:
    put:
      description: 'Actualiza la información de un ticket de la base de datos usando un id.'
      parameters:
      - in: 'query'
        name: 'idticket'
        required: true
        description: 'Identificador unico del ticket asignado en la base de datos'
        schema: 
          type: 'number'
          example: 1
      - in: 'path'
        name: 'id_user'
        required: true
        description: 'Nombre del usuario que generó el ticket'
        schema: 
          type: 'string'
          example: 'user1'
      - in: 'path'
        name: 'ticket_desc'
        required: true
        description: 'Descripción de la apertura del ticket.'
        schema: 
          type: 'string'
          example: 'Se necesita un nuevo soporte pata la TV'
      - in: 'path'
        name: 'created_at'
        required: true
        description: 'Fecha de creación.'
        schema: 
          type: 'string'
          format: 'date'
          example: '2020-06-10'
      - in: 'path'
        name: 'time_duration'
        required: true
        description: 'Duración del ticket en minutos.'
        schema: 
          type: 'number'
          example: '300'
      - in: 'path'
        name: 'closed_at'
        required: true
        description: 'Fecha de cierre.'
        schema: 
          type: 'number'
          format: 'date'
          example: '2020-06-10'
      - in: 'path'
        name: 'state_ticket'
        required: true
        description: 'El estado del ticket, valor por defecto false.'
        schema: 
          type: 'boolean'
          example: false
      - in: 'path'
        name: 'assigned_to'
        required: true
        description: 'Identificador del técnico al cual fue asignado el ticket.'
        schema: 
          type: 'string'
          example: '4'
      responses:
        200: 
          description: 'Se actualizó el ticket especificado.'
          content: 
            application/json:
              schema: 
                type: 'array'
                items:
                  properties:
                     message:
                      type: 'string'
                      example: "The ticket was edited!" 
        401:
          description: 'No existe token de inicio de sesión'
          content:
            application/json:
              schema: 
                type: 'array'
                items:
                  properties:
                    auth:
                      type: 'boolean'
                      example: false
                    message:
                      type: 'string'
                      example: "You don't have permission for this action!"              
        400:
          description: 'La API falló'
          content:
            application/json:
              schema: 
                type: 'array'
                items:
                  properties:
                    message:
                      type: 'array'
                      example: "Something failed: APP Error"

servers:
# Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/AndresSierra/TicketSupportAPI/1.0
  - url: 'http://localhost:8080/api/v1/'
    description: 'El PATH base de cada endpoint cuando se trabaja localmente'
  - url: 'https://ticket-support-api-rest.herokuapp.com/api/v1'
    description: 'El PATH generado después del despliegue en Heroku'